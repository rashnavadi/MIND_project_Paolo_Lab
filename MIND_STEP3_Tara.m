%% Section0: ***** This script runs fsl, but only if matlab is opened through terminal using 
% /Applications/Matlab_R2019a.app/bin/matlab

% What it does - calls on trim_func_data to take merged fMRI data (all runs together), 
% and will trim according to the length required for different increments of events, 
% as generated by previous event timings scripts. 

% Requirements
%  Folder - subject specific (e.g., MinDch_Sub034)
%   Folder - Merged_runs 
%       File - Merged functional run from "...Merge_functional_runs" script
%       File - "...Run_names.mat" file generated in "Merge_functional_runs"
%       
%   Folder - Event Timing 
%       File - Last Event_timing file from "...event_timing .._separate_runs" script
%       File - Total Num Events file from "...event_timing .. _separate_runs" script"
%% Section1: Create batch for execution

% Create initial project paths
Paths.script             = mfilename( 'fullpath');
[Paths.scriptPath, ~, ~] = fileparts(Paths.script);
Paths.dataPath           = extractBefore(Paths.scriptPath,"/4_Scripts");

% Warn the user that Matlab must be initiated through terminal in order for
% the script to work
tmp_Box.WindowStyle = 'non-modal';
tmp_Box.Interpreter = 'tex';
waitfor(msgbox({'\fontsize{16} MIND must be run in Matlab initialized in terminal.'; ...
    '\fontsize{16} (/Applications/MATLAB\_R20##.app/bin/matlab &)'}, 'MIND', 'help', tmp_Box));

% Find all potential subjects for analysis
SubjectFolders = dir(Paths.dataPath);
SubjectFolders = string(extractfield(SubjectFolders, 'name'));
SubjectFolders = SubjectFolders';
tmp_SubjectFolders_Relevant = find(contains(SubjectFolders, 'MIND0', 'IgnoreCase', true));
SubjectFolders = SubjectFolders(tmp_SubjectFolders_Relevant);
tmp_Remove = contains(SubjectFolders, '._');
tmp_keep = find(tmp_Remove * -1 + 1);
SubjectFolders = SubjectFolders(tmp_keep);

% Generate GUI for the user to select the subjects they want to run
tmp_GUI_spacing = (30*numel(SubjectFolders)):-30:25;
tmp_GUI_height  = tmp_GUI_spacing(1) + 55;
tmp_GUI_spacing = tmp_GUI_spacing + 20;

tmp_fig = uifigure;
tmp_fig.Visible = 'on';
set(0,'units','pixels')
tmp_Pix_SS = get(0,'screensize');
tmp_figCtr = tmp_fig.Position(3:4)./2;
tmp_fig.Position(4) = 600;
tmp_fig.Position(3) = 350;
tmp_fig.Position(1:2) = (tmp_Pix_SS(3:4)./2) - tmp_figCtr;
tmp_fig.Name = 'MIND Subject Selection';
tmp_fig.Scrollable = 'on';
tmp_fig.Resize = 'on';

for tmp_loop = 1:numel(SubjectFolders)
   tmp_sub(tmp_loop) = uicheckbox(tmp_fig);
end
for tmp_loop = 1:numel(SubjectFolders)  
   tmp_sub(tmp_loop).Text = SubjectFolders(tmp_loop);
end
for tmp_loop = 1:numel(SubjectFolders)   
   tmp_sub(tmp_loop).Position(4) = 15;
end
for tmp_loop = 1:numel(SubjectFolders)  
   tmp_sub(tmp_loop).Position(3) = 75;
end
for tmp_loop = 1:numel(SubjectFolders)   
   tmp_sub(tmp_loop).Position(1) = 75;
end
for tmp_loop = 1:numel(SubjectFolders)   
   tmp_sub(tmp_loop).Position(2) = tmp_GUI_spacing(tmp_loop);
end
for tmp_loop = 1:numel(SubjectFolders)   
   tmp_sub(tmp_loop).Value = 0;
end

tmp_btn = uibutton(tmp_fig, 'ButtonPushedFcn', {@AddSubject, tmp_sub});
tmp_btn.Text = 'DONE';
tmp_btn.Position = [175 (tmp_GUI_height/2) 100 25];

tmp_fig.Visible = 'on';

waitfor(tmp_btn,'Enable', 'off')
close(tmp_fig)

tmp_SubjectStates = tmp_SubjectStates';

% Remove subjects not selected from the GUI
tmp_SubjectStates  = string(tmp_SubjectStates);
tmp_RemoveSubjects = find(contains(tmp_SubjectStates, 'true', 'IgnoreCase', true));
SubjectFolders     = SubjectFolders(tmp_RemoveSubjects);

clear tmp_*

for CurrSub = 1:numel(SubjectFolders)
    % Initialize and set subject variables
    mkdir(fullfile(Paths.dataPath, SubjectFolders(CurrSub), '4_Analyses', 'Step3'))
    Subject.ID         = SubjectFolders(CurrSub);
    Paths.analysisPath = fullfile(Paths.dataPath, Subject.ID, '4_Analyses', 'Step3');

    Paths.fMRIrunsPath     = fullfile(Paths.dataPath, SubjectFolders(CurrSub), '3_MRI', '2_Functionals', '2_Preprocessed');
    tmp_fMRIrunPath        = dir(Paths.fMRIrunsPath);
    tmp_fMRIrunPath        = string(extractfield(tmp_fMRIrunPath, 'name'));
    tmp_fMRIrunPath        = tmp_fMRIrunPath';
    tmp_fMRIrunPath_Remove = find(contains(tmp_fMRIrunPath, 'Run'));
    tmp_fMRIrunPath        = tmp_fMRIrunPath(tmp_fMRIrunPath_Remove);
    tmp_fMRIrunPath_Remove = contains(tmp_fMRIrunPath, 'Exclude');
    tmp_fMRIrunPath_Remove = find(tmp_fMRIrunPath_Remove * -1 + 1);
    tmp_fMRIrunPath        = tmp_fMRIrunPath(tmp_fMRIrunPath_Remove);
    tmp_fMRIrunPath        = extractBefore(tmp_fMRIrunPath, '.feat');
    Subject.fMRIruns       = tmp_fMRIrunPath;

    Paths.EEGrunsPath     = fullfile(Paths.dataPath, SubjectFolders(CurrSub), '2_EEG', '2_Cleaned');
    tmp_EEGrunPath        = dir(Paths.EEGrunsPath);
    tmp_EEGrunPath        = string(extractfield(tmp_EEGrunPath, 'name'));
    tmp_EEGrunPath        = tmp_EEGrunPath';
    tmp_EEGrunPath_Remove = find(contains(tmp_EEGrunPath, 'Run'));
    tmp_EEGrunPath        = tmp_EEGrunPath(tmp_EEGrunPath_Remove);
    tmp_EEGrunPath_Remove = contains(tmp_EEGrunPath, 'Exclude');
    tmp_EEGrunPath_Remove = find(tmp_EEGrunPath_Remove * -1 + 1);
    tmp_EEGrunPath        = tmp_EEGrunPath(tmp_EEGrunPath_Remove);
    tmp_EEGrunPath        = extractBefore(tmp_EEGrunPath, '_Cleaned');
    tmp_EEGrunPath        = extractAfter(tmp_EEGrunPath,'_');
    Subject.EEGruns       = tmp_EEGrunPath;

    Paths.eventsPath   = fullfile(Paths.dataPath, SubjectFolders(CurrSub), '2_EEG', '3_Events');
    tmp_EventPath        = dir(Paths.eventsPath);
    tmp_EventPath        = string(extractfield(tmp_EventPath, 'name'));
    tmp_EventPath        = tmp_EventPath';
    tmp_EventPath_Remove = find(contains(tmp_EventPath, 'IED'));
    tmp_EventPath        = tmp_EventPath(tmp_EventPath_Remove);
    tmp_EventPath_Remove = contains(tmp_EventPath, 'MIND');
    tmp_EventPath_Remove = find(tmp_EventPath_Remove * -1 + 1);
    tmp_EventPath        = tmp_EventPath(tmp_EventPath_Remove);
    Subject.Events       = tmp_EventPath;

    clear tmp_*

    for EV_loop = 1:numel(Subject.Events)

        % Make output folders
        Paths.indexEventPath = fullfile(Paths.analysisPath, Subject.Events(EV_loop));
        if ~isfolder(Paths.indexEventPath)
            mkdir(Paths.indexEventPath)
        end

        %% Section2: Trim Functional Runs
        
        % for naming purposes, this part will load in the naming variable generated
        % in previous step
        % =====================
        % ADDED BY TAHEREH, APRIL 2024
        % for the case with only one run of fmri go grab the filteredfunc
        % in preprocessed folder in MRI folder
        if ~exist(fullfile(Paths.dataPath, Subject.ID, '4_Analyses/Step1/MergedFunctionals/', strcat(Subject.ID, '_Merged_functional_data_', Subject.fMRIruns(1), '-', Subject.fMRIruns(end), '.nii.gz')))
            fMRI_data_filename = fullfile(Paths.dataPath, Subject.ID, '3_MRI/2_Functionals/2_Preprocessed', strcat(Subject.fMRIruns(1), '.feat'), strcat(Subject.ID,'_', Subject.fMRIruns(1),'_', 'filtered_func_ICA.nii.gz')); 
        else
            fMRI_data_filename = fullfile(Paths.dataPath, Subject.ID, '4_Analyses/Step1/MergedFunctionals/', strcat(Subject.ID, '_Merged_functional_data_', Subject.fMRIruns(1), '-', Subject.fMRIruns(end), '.nii.gz'));
        end
        % =====================

              
        % Load in last event timings and number of events per iteration from 'event_timing_merge' and
        % 'event_timing_separate' as variables
        last_event_filepath = fullfile(Paths.dataPath, Subject.ID, '4_Analyses/Step2', Subject.Events(EV_loop), 'BinnedTimings/', strcat(Subject.ID, '_', Subject.Events(EV_loop),'_Last_Event_Timing.txt'));
        last_event = dlmread(last_event_filepath);
        
        num_events_per_iteration_filename = fullfile(Paths.dataPath, Subject.ID, '4_Analyses/Step2', Subject.Events(EV_loop), 'BinnedTimings/', strcat(Subject.ID, '_', Subject.Events(EV_loop), '_Num_Events_Per_Iteration.txt'));
        num_events_per_iteration = dlmread(num_events_per_iteration_filename);
            
        % Loop will run through each of the last event timings, convert the last 
        % event timing into a number of volumes and use fslroi to trim the total volume
        
        for i = 1:length(last_event)
            volumes(i) = ceil(last_event(i) / 1.5);
            trim_volumes_in = num2str(volumes(i));
            num_event_str = num2str(num_events_per_iteration(i));
            trim_out = fullfile(Paths.indexEventPath, strcat(Subject.ID, '_', Subject.Events(EV_loop), '_', num_event_str, '_events.nii.gz'));
            disp(trim_out)   
            % To use fsl commands in matlab, need all variable strings to be
            %concatenated into one string (that doesnt rely on variables)
            command_trim = ['fslroi', fMRI_data_filename, trim_out ,'0', trim_volumes_in];
            command_trim = strjoin(command_trim);
            system(command_trim);
        
        end
        
        %This part writes the number of volumes per file to a txt file to be used by the next script
        volumes = volumes';
        volumes_per_iteration_name = fullfile(Paths.indexEventPath, append(Subject.ID, '_', Subject.Events(EV_loop), '_volumes_per_iteration.txt'));
        dlmwrite(volumes_per_iteration_name, volumes);
    end % End event loop
    disp(append('Done ', Subject.ID));
end % End subject loop

clear

%% Define Minor Functions for GUI to work %%

function AddSubject(src,event, tmp_sub)
    for looper = 1:length(tmp_sub)
        states(looper) = tmp_sub(looper).Value;
    end
    assignin('base','tmp_SubjectStates', states);
    tmp_btn = evalin('base', 'tmp_btn');
    tmp_btn.Enable = 'off';
    assignin('base','tmp_btn', tmp_btn);
    return
end

